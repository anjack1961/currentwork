Vault Installation to Minikube via Helm with TLS enabled
TLS が有効な Helm を介した Minikube への Vault のインストール
https://developer.hashicorp.com/vault/tutorials/kubernetes/kubernetes-minikube-tls

Create the certificate

1. create a working directory
$ mkdir /tmp/vault

2. Export the working directory location and the naming variables.
$ export VAULT_K8S_NAMESPACE="vault" \
> export VAULT_HELM_RELEASE_NAME="vault" \
> export VAULT_SERVICE_NAME="vault-internal" \
> export K8S_CLUSTER_NAME="cluster.local" \
> export WORKDIR=/tmp/vault

3. Generate the private key
$ openssl genrsa -out ${WORKDIR}/vault.key 2048
Generating RSA private key, 2048 bit long modulus (2 primes)
...............+++++
...........................................................................................................+++++
e is 65537 (0x010001)

Create the Certificate Signing Request (CSR).

1. Create the CSR configuration file
cat > ${WORKDIR}/vault-csr.conf <<EOF
[req]
default_bits = 2048
prompt = no
encrypt_key = yes
default_md = sha256
distinguished_name = kubelet_serving
req_extensions = v3_req
[ kubelet_serving ]
O = system:nodes
CN = system:node:*.${VAULT_HELM_RELEASE_NAME}.svc.${K8S_CLUSTER_NAME}
[ v3_req ]
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth, clientAuth
subjectAltName = @alt_names
[alt_names]
DNS.1 = *.${VAULT_SERVICE_NAME}
DNS.2 = *.${VAULT_SERVICE_NAME}.${VAULT_HELM_RELEASE_NAME}.svc.${K8S_CLUSTER_NAME}
DNS.3 = *.${VAULT_HELM_RELEASE_NAME}
IP.1 = 127.0.0.1
EOF

2. Generate the CSR
openssl req -new -key ${WORKDIR}/vault.key -out ${WORKDIR}/vault.csr -config ${WORKDIR}/vault-csr.conf


Issue the Certificate.

1. Create the csr yaml file to send it to Kubernetes.
cat > ${WORKDIR}/csr.yaml <<EOF
apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
   name: vault.svc
spec:
   signerName: kubernetes.io/kubelet-serving
   expirationSeconds: 8640000
   request: $(cat ${WORKDIR}/vault.csr|base64|tr -d '\n')
   usages:
   - digital signature
   - key encipherment
   - server auth
EOF

$ cat > ${WORKDIR}/csr.yaml <<EOF
> apiVersion: certificates.k8s.io/v1
> kind: CertificateSigningRequest
> metadata:
>    name: vault.svc
> spec:
>    signerName: kubernetes.io/kubelet-serving
>    expirationSeconds: 8640000
>    request: $(cat ${WORKDIR}/vault.csr|base64|tr -d '\n')
>    usages:
>    - digital signature
>    - key encipherment
>    - server auth
> EOF

2. Send the CSR to Kubernetes
minikube kubectl -- create -f ${WORKDIR}/csr.yaml
$ minikube kubectl -- create -f ${WORKDIR}/csr.yaml
certificatesigningrequest.certificates.k8s.io/vault.svc created

3. Approve the CSR in Kubernetes.
minikube kubectl -- certificate approve vault.svc
$ minikube kubectl -- certificate approve vault.svc
certificatesigningrequest.certificates.k8s.io/vault.svc approved

4. Confirm the certificate was issued
minikube kubectl -- get csr vault.svc
$ minikube kubectl -- get csr vault.svc
NAME        AGE    SIGNERNAME                      REQUESTOR       REQUESTEDDURATION   CONDITION
vault.svc   109s   kubernetes.io/kubelet-serving   minikube-user   100d                Approved,Issued



Store the certificates and Key in the Kubernetes secrets store
証明書とキーを Kubernetes シークレット ストアに保存する

1. 証明書を取得する
minikube kubectl -- get csr vault.svc -o jsonpath='{.status.certificate}' | openssl base64 -d -A -out ${WORKDIR}/vault.crt
$ minikube kubectl -- get csr vault.svc -o jsonpath='{.status.certificate}' | openssl base64 -d -A -out ${WORKDIR}/vault.crt


2. Retrieve Kubernetes CA certificate
minikube kubectl -- config view \
--raw \
--minify \
--flatten \
-o jsonpath='{.clusters[].cluster.certificate-authority-data}' \
| base64 -d > ${WORKDIR}/vault.ca

$ minikube kubectl -- config view \
> --raw \
> --minify \
> --flatten \
> -o jsonpath='{.clusters[].cluster.certificate-authority-data}' \
> | base64 -d > ${WORKDIR}/vault.ca


3. Kubernetes 名前空間を作成する
minikube kubectl -- create namespace $VAULT_K8S_NAMESPACE
$ minikube kubectl -- create namespace $VAULT_K8S_NAMESPACE
namespace/vault created

4. Create the TLS secret
minikube kubectl -- create secret generic vault-ha-tls \
   -n $VAULT_K8S_NAMESPACE \
   --from-file=vault.key=${WORKDIR}/vault.key \
   --from-file=vault.crt=${WORKDIR}/vault.crt \
   --from-file=vault.ca=${WORKDIR}/vault.ca

$ minikube kubectl -- create secret generic vault-ha-tls \
>    -n $VAULT_K8S_NAMESPACE \
>    --from-file=vault.key=${WORKDIR}/vault.key \
>    --from-file=vault.crt=${WORKDIR}/vault.crt \
>    --from-file=vault.ca=${WORKDIR}/vault.ca
secret/vault-ha-tls created

Deploy the vault cluster via helm with overrides
オーバーライドを使用して helm を介してボルト クラスターをデプロイする

1. Create the overrides.yaml file.
$ cat > ${WORKDIR}/overrides.yaml <<EOF
> global:
>    enabled: true
>    tlsDisable: false
> injector:
>    enabled: true
> server:
>    extraEnvironmentVars:
>       VAULT_CACERT: /vault/userconfig/vault-ha-tls/vault.ca
>       VAULT_TLSCERT: /vault/userconfig/vault-ha-tls/vault.crt
>       VAULT_TLSKEY: /vault/userconfig/vault-ha-tls/vault.key
>    volumes:
>       - name: userconfig-vault-ha-tls
>         secret:
>          defaultMode: 420
>          secretName: vault-ha-tls
>    volumeMounts:
>       - mountPath: /vault/userconfig/vault-ha-tls
>         name: userconfig-vault-ha-tls
>         readOnly: true
>    standalone:
>       enabled: false
>    affinity: ""
>    ha:
>       enabled: true
>       replicas: 3
>       raft:
>          enabled: true
>          setNodeId: true
>          config: |
>             ui = true
>             listener "tcp" {
>                tls_disable = 0
>                address = "[::]:8200"
>                cluster_address = "[::]:8201"
>                tls_cert_file = "/vault/userconfig/vault-ha-tls/vault.crt"
>                tls_key_file  = "/vault/userconfig/vault-ha-tls/vault.key"
>                tls_client_ca_file = "/vault/userconfig/vault-ha-tls/vault.ca"
>             }
>             storage "raft" {
>                path = "/vault/data"
>             }
>             disable_mlock = true
>             service_registration "kubernetes" {}
> EOF

2. Deploy the Cluster
$ helm install -n $VAULT_K8S_NAMESPACE $VAULT_HELM_RELEASE_NAME hashicorp/vault -f ${WORKDIR}/overrides.yaml
NAME: vault
LAST DEPLOYED: Fri Nov 25 16:09:03 2022
NAMESPACE: vault
STATUS: deployed
REVISION: 1
NOTES:
Thank you for installing HashiCorp Vault!

Now that you have deployed Vault, you should look over the docs on using
Vault with Kubernetes available here:

https://www.vaultproject.io/docs/


Your release is named vault. To learn more about the release, try:

  $ helm status vault
  $ helm get manifest vault


3. ボールト用に作成した名前空間のポッドを表示します
$ minikube kubectl -- -n $VAULT_K8S_NAMESPACE get pods
NAME                                    READY   STATUS    RESTARTS   AGE
vault-0                                 0/1     Running   0          2m44s
vault-1                                 0/1     Running   0          2m43s
vault-2                                 0/1     Running   0          2m41s
vault-agent-injector-6679b665fd-vzrmk   1/1     Running   0          2m45s

4. 1 つのキー共有と 1 つのキーしきい値で vault-0 を初期化します。
$ minikube kubectl -- exec -n $VAULT_K8S_NAMESPACE vault-0 -- vault operator init \
>     -key-shares=1 \
>     -key-threshold=1 \
>     -format=json > ${WORKDIR}/cluster-keys.json

5. cluster-keys.json にある unseal キーを表示します。
$ jq -r ".unseal_keys_b64[]" ${WORKDIR}/cluster-keys.json
A6MqaQ4LDx3UY1MI2ip0uunRG4VWkrYmxnxNvG4epYw=

6. VAULT_UNSEAL_KEY という名前の変数を作成して、Vault 開封キーを取得します。
$ VAULT_UNSEAL_KEY=$(jq -r ".unseal_keys_b64[]" ${WORKDIR}/cluster-keys.json)

7. Unseal Vault running on the vault-0 pod.
Vault-0 ポッドで実行されている Vault をアンシールします。
$ minikube kubectl -- exec -n $VAULT_K8S_NAMESPACE vault-0 -- vault operator unseal $VAULT_UNSEAL_KEY
Key                     Value
---                     -----
Seal Type               shamir
Initialized             true
Sealed                  false
Total Shares            1
Threshold               1
Version                 1.12.0
Build Date              2022-10-10T18:14:33Z
Storage Type            raft
Cluster Name            vault-cluster-111f6fee
Cluster ID              d2c625f6-a1bd-6efc-2e4f-6fe9ef5fec69
HA Enabled              true
HA Cluster              n/a
HA Mode                 standby
Active Node Address     <none>
Raft Committed Index    31
Raft Applied Index      31




vault-1 と vault2 ポッドを Raft クラスタに参加させる

1. vault-1 ポッドでインタラクティブ シェル セッションを開始します。
$ minikube kubectl -- exec -n $VAULT_K8S_NAMESPACE -it vault-1 -- /bin/sh
/ $

2. vault-1 ポッドを Raft クラスタに参加させます。
/ $ vault operator raft join -address=https://vault-1.vault-internal:8200 -leader-ca-cert="$(cat /vault/userconfig/vault-ha-tls/vault.ca)" -leader-cli
ent-cert="$(cat /vault/userconfig/vault-ha-tls/vault.crt)" -leader-client-key="$(cat /vault/userconfig/vault-ha-tls/vault.key)" https://vault-0.vault-
internal:8200
Key       Value
---       -----
Joined    true

3. Exit the vault-1 pod.
/ $ exit

4. Vault-1 を開封します。
$ minikube kubectl -- exec -n $VAULT_K8S_NAMESPACE -ti vault-1 -- vault operator unseal $VAULT_UNSEAL_KEY
Key                Value
---                -----
Seal Type          shamir
Initialized        true
Sealed             true
Total Shares       1
Threshold          1
Unseal Progress    0/1
Unseal Nonce       n/a
Version            1.12.0
Build Date         2022-10-10T18:14:33Z
Storage Type       raft
HA Enabled         true

5. vault-2 ポッドでインタラクティブ シェル セッションを開始します。
$ minikube kubectl -- exec -n $VAULT_K8S_NAMESPACE -it vault-2 -- /bin/sh
/ $

6.vault-2 ポッドを Raft クラスタに参加させます。
/ $ vault operator raft join -address=https://vault-2.vault-internal:8200 -leader-ca-cert="$(cat /vault/userconfig/vault-ha-tls/vault.ca)" -leader-cli
ent-cert="$(cat /vault/userconfig/vault-ha-tls/vault.crt)" -leader-client-key="$(cat /vault/userconfig/vault-ha-tls/vault.key)" https://vault-0.vault-
internal:8200
Key       Value
---       -----
Joined    true

7. Exit the vault-2 pod.
/ $ exit

8. Vault-2 を開封します。
$ minikube kubectl -- exec -n $VAULT_K8S_NAMESPACE -ti vault-2 -- vault operator unseal $VAULT_UNSEAL_KEY
Key                Value
---                -----
Seal Type          shamir
Initialized        true
Sealed             true
Total Shares       1
Threshold          1
Unseal Progress    0/1
Unseal Nonce       n/a
Version            1.12.0
Build Date         2022-10-10T18:14:33Z
Storage Type       raft
HA Enabled         true

9. クラスター ルート トークンをエクスポートする
$ export CLUSTER_ROOT_TOKEN=$(cat ${WORKDIR}/cluster-keys.json | jq -r ".root_token")

10. root トークンを使用して vault-0 にログインします
$ minikube kubectl -- exec -n $VAULT_K8S_NAMESPACE vault-0 -- vault login $CLUSTER_ROOT_TOKEN
Success! You are now authenticated. The token information displayed below
is already stored in the token helper. You do NOT need to run "vault login"
again. Future Vault requests will automatically use this token.

Key                  Value
---                  -----
token                hvs.rk4QqmDitrf9dFiKgeFKuma3
token_accessor       rPxhL1MGX8GhsHepqENCVTAT
token_duration       ∞
token_renewable      false
token_policies       ["root"]
identity_policies    []
policies             ["root"]

11. ラフト ピアを一覧表示します。
$ minikube kubectl -- exec -n $VAULT_K8S_NAMESPACE vault-0 -- vault operator raft list-peers
Node       Address                        State       Voter
----       -------                        -----       -----
vault-0    vault-0.vault-internal:8201    leader      true
vault-1    vault-1.vault-internal:8201    follower    true
vault-2    vault-2.vault-internal:8201    follower    true

12. HA ステータスを出力する
$ minikube kubectl -- exec -n $VAULT_K8S_NAMESPACE vault-0 -- vault status
Key                     Value
---                     -----
Seal Type               shamir
Initialized             true
Sealed                  false
Total Shares            1
Threshold               1
Version                 1.12.0
Build Date              2022-10-10T18:14:33Z
Storage Type            raft
Cluster Name            vault-cluster-111f6fee
Cluster ID              d2c625f6-a1bd-6efc-2e4f-6fe9ef5fec69
HA Enabled              true
HA Cluster              https://vault-0.vault-internal:8201
HA Mode                 active
Active Since            2022-11-25T07:15:15.70563157Z
Raft Committed Index    42
Raft Applied Index      42




シークレットを作成する

1. vault-0 ポッドでインタラクティブ シェル セッションを開始します。
$ minikube kubectl -- exec -n $VAULT_K8S_NAMESPACE -it vault-0 -- /bin/sh
/ $

2. kv-v2 シークレット エンジンを有効にする
/ $ vault secrets enable -path=secret kv-v2
Success! Enabled the kv-v2 secrets engine at: secret/

3. ユーザー名とパスワードを使用して、パス secret/tls/apitest にシークレットを作成します
/ $ vault kv put secret/tls/apitest username="apiuser" password="supersecret"
===== Secret Path =====
secret/data/tls/apitest

======= Metadata =======
Key                Value
---                -----
created_time       2022-11-25T07:37:06.658280589Z
custom_metadata    <nil>
deletion_time      n/a
destroyed          false
version            1

4. シークレットがパス secret/tls/apitest で定義されていることを確認します
/ $ vault kv get secret/tls/apitest
===== Secret Path =====
secret/data/tls/apitest

======= Metadata =======
Key                Value
---                -----
created_time       2022-11-25T07:37:06.658280589Z
custom_metadata    <nil>
deletion_time      n/a
destroyed          false
version            1

====== Data ======
Key         Value
---         -----
password    supersecret
username    apiuser

5. Exit the vault-0 pod.
/ $ exit


ボールト サービスを公開し、API を介してシークレットを取得する

1. Vault サービスの構成を確認する
$ minikube kubectl -- -n $VAULT_K8S_NAMESPACE get service vault
NAME    TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)             AGE
vault   ClusterIP   10.103.224.203   <none>        8200/TCP,8201/TCP   29m

2. 別のターミナルで、vault サービスをポート転送します。
$ minikube kubectl -- -n vault port-forward service/vault 8200:8200
Forwarding from 127.0.0.1:8200 -> 8200
Forwarding from [::1]:8200 -> 8200


Handling connection for 8200

3. 元のターミナルで、HTTPS curl リクエストを実行して、前のセクションで作成したシークレットを取得します。
$ curl --cacert $WORKDIR/vault.ca \
>    --header "X-Vault-Token: $CLUSTER_ROOT_TOKEN" \
>    https://127.0.0.1:8200/v1/secret/data/tls/apitest | jq .data.data
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100   347  100   347    0     0  15772      0 --:--:-- --:--:-- --:--:-- 15772
{
  "password": "supersecret",
  "username": "apiuser"
}








